MetalNode {
    Identifier @internal {
        [a-zA-Z_][] identifier
    }

    Digits @internal {
        [0-9][] digits 
    }

    Operator @enumify
    {
        Add { 
            "+"
        }

        Sub {
             "-"
        }

        Mul {
             "*"
        }

        Div {
             "/"
        }

        Cat {
             "~"
        }

        CatAss {
             "~="
        }

        Assign {
             "="
        }

        Eq {
            "=="
        }
        
        Neq {
            "!="
        }

        Lt {
             "<"
        }

        Gt {
             ">"
        }

        Le {
             "<="
        }

        Ge {
             ">="
        }

        SpaceShip {
             "<=>"
        }

        Dot {
             "."
        }

        Arrow {
             "->"
        }
    }

    Expression {

        IntExp {
            Digits number;
        }

        StringExp {
            "\"", char[] string, "\""
        }

        InjectExp {
            "inject", Expression ie
        }

        EjectExp {
            "eject", Expression ee
        }

        AssertExp {
            "assert", "(", Expression ae, ",", StringLiteral msg, ")"
        }

        OuterParenExp {
            "$(", Expression[] exps : ",", ")"
        }
        
        OuterExp {
            "$", Identfier outer_name
        }
        AddrExp {
            "&", Expression lhs
        }

        PtrExp {
            "*", Expression lhs
        }

        ParenExp {
            "(", Expresion lhs, ")"
        }

        IdentifierExp {
            Identfier identifier
        }

        BinaryExpression {
             Expression rhs, Operator op, Expression rhs
        }

        TernaryExpression {
            Expression cond, "?", Expression e1, ":", Expression e2  
        }

        SliceExp {
            Expression slice, "[", Expression lower, "..", Expression upper, "]"
        }

        FullSliceExp {
            Expression var, "[]"
        }

        CallExp {
            Expression func, "(", Expression[] args : ",", ")"
        }
    }

    
    Variable @internal {
        "type" / Identfier type, Identifier name
    }

    Comment {
        CommentLine @internal {
            "//"
        }

        CommentMultilline {
            "/*," char[], "*/"
        }
    }


    Typedef { 
        "typedef", Type type, Identifier name, ";"
    }

    Type {
        Struct {
            "struct", Identifier name,  "{", Variable[] members : ";", "}"
        }

        Union {
            "union", Identifier name, "{", Variable[] members : ";", "}"
        }

        Enum {
            "enum", Identifier name, "{", Identfier[] member_names : ",", "}"
        }

        ArrayType {
            Type elementType , "[", Expression e, "]"
        }
    }
}
